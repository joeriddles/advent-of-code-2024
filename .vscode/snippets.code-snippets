{
	"day": {
		"description": "Define a new day struct",
		"scope": "go,golang",
		"prefix": "day",
		"body": [
			"package main",
			"",
			"import (",
			"\t\"fmt\"",
			"",
			"\t\"github.com/joeriddles/advent-of-code-2024/pkg/day\"",
			")",
			"",
			"func main() {",
			"\tday := &Day$0{}",
			"\tinput := day.Parse()",
			"",
			"\tanswer1 := day.Part1(input)",
			"\tfmt.Printf(\"part1: %v\\n\", answer1)",
			"",
			"\tanswer2 := day.Part2(input)",
			"\tfmt.Printf(\"part2: %v\\n\", answer2)",
			"}",
			"",
			"type Day$0 struct {",
			"\t*day.BaseDay",
			"}",
			"",
			"func NewDay$0() day.Day {",
			"\treturn &Day$0{",
			"\t\tBaseDay: day.NewBaseDay(),",
			"\t}",
			"}",
			"",
			"func (d *Day$0) Part1(input string) int {",
			"\treturn -1",
			"}",
			"",
			"func (d *Day$0) Part2(input string) int {",
			"\treturn -1",
			"}",
		]
	},
	"day-tests": {
		"description": "define tests for a day struct",
		"scope": "go,golang",
		"prefix": "day-tests",
		"body": [
			"package main",
			"",
			"import \"testing\"",
			"",
			"const src = ``",
			"",
			"func TestPart1(t *testing.T) {",
			"\texpected := 0",
			"\tactual := (&Day$0{}).Part1(src)",
			"\tif actual != expected {",
			"\t\tt.Fatalf(\"expected %v, got %v\", expected, actual)",
			"\t}",
			"}",
			"",
			"func TestPart2(t *testing.T) {",
			"\texpected := 0",
			"\tactual := (&Day$0{}).Part2(src)",
			"\tif actual != expected {",
			"\t\tt.Fatalf(\"expected %v, got %v\", expected, actual)",
			"\t}",
			"}",
		]
	}
}
